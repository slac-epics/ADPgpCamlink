#
# EPICS database for
# Imperx Cheetah Pregius C1921 Camera
#
# Required macros:
#	P			PV prefix part 1 $P$R
#	R			PV prefix part 2 $P$R
#	PGP_PV		PV prefix for rogue register PVs
#	PGP_LANE	PGP_LANE number 0-3
#

record( stringin, "$(P)$(R)CamModel" )
{
	field( VAL,  "C1921" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)CamModelScreen" )
{
	field( VAL,  "ADPgpCamlinkScreens/ImperxC1921.edl" )
	field( PINI, "YES" )
}

# Camlink settings
record( longout, "$(P)$(R)CamlinkPixelClk" )
{
	field( DOL,  "50" )
}

record( longout, "$(P)$(R)CamlinkBaudRate" )
{
	field( DOL,  "115200" )
	field( OMSL, "closed_loop" )
	field( HIGH, "115201" )
	field( HSV,  "MINOR" )
	field( LOW,  "115199" )
	field( LSV,  "MINOR" )
	field( PINI, "YES" )
}
# Default to 4, Deca LinkMode
record( mbbo, "$(P)$(R)CamlinkLinkMode" )
{
	field( DOL,  "4" )
	field( ZRSV, "MINOR" )
	field( FVSV, "MINOR" )
	field( PINI, "YES" )
}
record( mbbo, "$(P)$(R)CamlinkDataMode" )
{
	field( DOL,  "2" ) # 10 Bit
	field( ZRSV, "MINOR" )
	field( ONSV, "NO_ALARM" )
	field( TWSV, "NO_ALARM" )
	field( THSV, "NO_ALARM" )
	field( FRSV, "MINOR" )
	field( FVSV, "MINOR" )
	field( PINI, "YES" )
}
record( mbbo, "$(P)$(R)CamlinkFrameMode" )
{
	field( DOL,  "2" )
	field( THSV, "MINOR" )
	field( ONSV, "MINOR" )
	field( PINI, "YES" )
}
record( longout, "$(P)$(R)CamlinkHTap" )
{
	field( DOL,  "8" )
	field( HIGH, "9" )
	field( HSV,  "MINOR" )
	field( LOW,  "1" )
	field( LSV,  "MINOR" )
	field( PINI, "YES" )
}
record( longout, "$(P)$(R)CamlinkTrigMask" )
{
	field( DOL,  "1" )	# Trigger on CC1
	field( OMSL, "closed_loop" )
	field( PINI, "YES" )
}
record( bo, "$(P)$(R)CamlinkInvCC" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
}

# Imperx Supported Camlink Modes
# The Imperx Cheetah supports a variety of combinations of:
#	LinkMode: Base, Medium, Full, or Deca
#	CMOS A/D Bits: 8, 10, or 12
#	Camlink Bits: 8, 10, or 12
# SLAC is supporting 4 combinations, using the
# best case number of bits for each of the 4 LinkModes.
# 0: 'Disable', 1: 'Base', 2: 'Medium', 3: 'Full', 4: 'Deca'
# Published frame rate:
#	Base, 12 bit, 60fps
#	Medium, 12 bit, 121fps
#	Full, 8 bit, 174fps
#	Deca, 10 bit, 143fps
#
# Max frames per second measured in free run
#	Base, 12 bit, 31fps FreeRun
#	Medium, 12 bit, 63fps FreeRun
#	Full, 8 bit, 172fps FreeRun
#	Deca, 10 bit, 0fps FreeRun, didn't work
record( mbbo, "$(P)$(R)CamMode" )
{
	field( DOL,  "2" )
	field( ZRVL, "0" ) field( ZRST, "Base 2 taps" )
	field( ONVL, "1" ) field( ONST, "Base 3 taps" )
	field( TWVL, "2" ) field( TWST, "Medium" )
	field( THVL, "3" ) field( THST, "Full" )
	field( FRVL, "4" ) field( FRST, "DECA" )
	info( autosaveFields, "VAL" )
}
# Select fanout off CamMode to a sequence record for each supported CamMode.
record( fanout, "$(P)$(R)CamModeFanout" )
{
	field( SELL, "$(P)$(R)CamMode CPP" )
	field( SELM, "Specified" )
	field( LNK0, "" )
	field( LNK1, "$(P)$(R)SeqCamModeBase" )
	field( LNK2, "$(P)$(R)SeqCamModeMedium" )
	field( LNK3, "$(P)$(R)SeqCamModeFull" )
	field( LNK4, "$(P)$(R)SeqCamModeDeca" )
}
record( seq, "$(P)$(R)SeqCamModeBase" )
{
	#	First stop aquisition triggers
	field( DLY0, "0" ) field( DOL0, "0" ) field( LNK0, "$(P)$(R)Acquire  PP NMS" )

	field( DESC, "Base Mode: 60fps, 12 bits, 2 taps" )
	field( DLY1, "2" ) field( DOL1, "2" ) field( LNK1, "$(P)$(R)ImperxA2D_Bits PP NMS" )
	field( DLY2, "0" ) field( DOL2, "2" ) field( LNK2, "$(P)$(R)ImperxDataOutputBits PP NMS" )
	field( DLY3, "0" ) field( DOL3, "0" ) field( LNK3, "$(P)$(R)ImperxCamlinkMode PP NMS" )
	field( DLY4, "0" ) field( DOL4, "3" ) field( LNK4, "$(P)$(R)CamlinkDataMode" )
	field( DLY5, "0" ) field( DOL5, "1" ) field( LNK5, "$(P)$(R)CamlinkLinkMode" )
	field( DLY6, "0" ) field( DOL6, "2" ) field( LNK6, "$(P)$(R)CamlinkHTap" )
}
record( seq, "$(P)$(R)SeqCamModeMedium" )
{
	#	First stop aquisition triggers
	field( DLY0, "0" ) field( DOL0, "0" ) field( LNK0, "$(P)$(R)Acquire  PP NMS" )

	field( DESC, "Medium Mode: 121fps, 12 bits, 4 taps" )
	field( DLY1, "2" ) field( DOL1, "2" ) field( LNK1, "$(P)$(R)ImperxA2D_Bits PP NMS" )
	field( DLY2, "0" ) field( DOL2, "2" ) field( LNK2, "$(P)$(R)ImperxDataOutputBits PP NMS" )
	field( DLY3, "0" ) field( DOL3, "2" ) field( LNK3, "$(P)$(R)ImperxCamlinkMode PP NMS" )
	field( DLY4, "0" ) field( DOL4, "3" ) field( LNK4, "$(P)$(R)CamlinkDataMode" )
	field( DLY5, "0" ) field( DOL5, "2" ) field( LNK5, "$(P)$(R)CamlinkLinkMode" )
	field( DLY6, "0" ) field( DOL6, "4" ) field( LNK6, "$(P)$(R)CamlinkHTap" )
}
record( seq, "$(P)$(R)SeqCamModeFull" )
{
	#	First stop aquisition triggers
	field( DLY0, "0" ) field( DOL0, "0" ) field( LNK0, "$(P)$(R)Acquire  PP NMS" )

	field( DESC, "Full Mode: 174fps, 8 bits, 8 taps" )
	field( DLY1, "2" ) field( DOL1, "0" ) field( LNK1, "$(P)$(R)ImperxA2D_Bits PP NMS" )
	field( DLY2, "0" ) field( DOL2, "0" ) field( LNK2, "$(P)$(R)ImperxDataOutputBits PP NMS" )
	field( DLY3, "0" ) field( DOL3, "3" ) field( LNK3, "$(P)$(R)ImperxCamlinkMode PP NMS" )
	field( DLY4, "0" ) field( DOL4, "1" ) field( LNK4, "$(P)$(R)CamlinkDataMode" )
	field( DLY5, "0" ) field( DOL5, "3" ) field( LNK5, "$(P)$(R)CamlinkLinkMode" )
	field( DLY6, "0" ) field( DOL6, "8" ) field( LNK6, "$(P)$(R)CamlinkHTap" )
}
record( seq, "$(P)$(R)SeqCamModeDeca" )
{
	#	First stop aquisition triggers
	field( DLY0, "0" ) field( DOL0, "0" ) field( LNK0, "$(P)$(R)Acquire  PP NMS" )

	field( DESC, "Deca Mode: 143fps, 10 bits, 8 taps" )
	field( DLY1, "2" ) field( DOL1, "1" ) field( LNK1, "$(P)$(R)ImperxA2D_Bits PP NMS" )
	field( DLY2, "0" ) field( DOL2, "1" ) field( LNK2, "$(P)$(R)ImperxDataOutputBits PP NMS" )
	field( DLY3, "0" ) field( DOL3, "4" ) field( LNK3, "$(P)$(R)ImperxCamlinkMode PP NMS" )
	field( DLY4, "0" ) field( DOL4, "2" ) field( LNK4, "$(P)$(R)CamlinkDataMode" )
	field( DLY5, "0" ) field( DOL5, "4" ) field( LNK5, "$(P)$(R)CamlinkLinkMode" )
	field( DLY6, "0" ) field( DOL6, "8" ) field( LNK6, "$(P)$(R)CamlinkHTap" )
}

# Provide defaults for ADCore SizeX and SizeY
record( longout, "$(P)$(R)SizeX" )
{
	field( DOL, "1944" )
}
record( longout, "$(P)$(R)SizeY" )
{
	field( DOL, "1472" )
}
record( longout, "$(P)$(R)CamlinkHActive" )
{
	field( VAL, "1944" )
}
record( longout, "$(P)$(R)CamlinkVActive" )
{
	field( VAL, "1472" )
}

# W/O, write 1 to reset device
record( bo, "$(P)$(R)ResetDevice" )
{
	field( DESC, "Reset camera to power up state" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetUint32(\\x601C,1) $(PORT).SER" )
    field( ZNAM, "Reset" )
    field( ONAM, "Resetting!"  )
#    field( SDIS, "$(P)$(R)SerialDisable" )
}

# Set SerThrottle to 30000
record( longout, "$(P)$(R)ImperxSerThrottle" )
{
	field( DOL,		"30000" )
    field( PINI,	"YES" )
	field( OUT,		"$(P)$(R)Feb$(PGP_LANE):SerThrottle" )
}

record( mbbo, "$(P)$(R)ImperxCommError" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( ZRVL, "0" ) field( ZRST, "No Error" )
	field( ONVL, "1" ) field( ONST, "Invalid Cmd" )
	field( TWVL, "2" ) field( TWST, "Time-out" )
	field( THVL, "3" ) field( THST, "Cksum Error" )
	field( FRVL, "4" ) field( FRST, "Val < Min" )
	field( FVVL, "5" ) field( FVST, "Val > Max" )
	field( SXVL, "6" ) field( SXST, "AGC Error" )
	field( SVVL, "7" ) field( SVST, "Supvsr Mode Err" )
	field( EIVL, "8" ) field( EIST, "Mode Not Supp" )
}

# TriggerEnable
record( mbbo, "$(P)$(R)ImperxTriggerEnable" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigEnable($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxTriggerEnable_RBV" )
	field( ZRVL, "0" ) field( ZRST, "Disabled" )
	field( ONVL, "1" ) field( ONST, "Enabled" )
#	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTriggerEnable_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigEnable($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Disabled" )
	field( ONVL, "1" ) field( ONST, "Enabled" )
}

# TrigInput
record( mbbo, "$(P)$(R)ImperxTrigInput" )
{
	field( DOL,  "3" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigInput($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "N/A" )
	field( ONVL, "1" ) field( ONST, "Ext Cam IN1" )
	field( TWVL, "2" ) field( TWST, "Internal" )
	field( THVL, "3" ) field( THST, "Camlink CC1" )
	field( FRVL, "4" ) field( FRST, "Software" )
	field( FVVL, "5" ) field( FVST, "Ext Cam IN2" )
	field( FLNK, "$(P)$(R)ImperxTrigInput_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTrigInput_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigInput($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "N/A" )
	field( ONVL, "1" ) field( ONST, "Ext Cam IN1" )
	field( TWVL, "2" ) field( TWST, "Internal" )
	field( THVL, "3" ) field( THST, "Camlink CC1" )
	field( FRVL, "4" ) field( FRST, "Software" )
	field( FVVL, "5" ) field( FVST, "Ext Cam IN2" )
}

# TrigEdgeSelect
record( mbbo, "$(P)$(R)ImperxTrigEdgeSelect" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigEdgeSelect($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxTrigEdgeSelect_RBV" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTrigEdgeSelect_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigEdgeSelect($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
}

# ExpCtrlMode
record( mbbo, "$(P)$(R)ImperxExpCtrlMode" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetExpCtrlMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Off" )
	field( ONVL, "1" ) field( ONST, "Pulse" )
	field( TWVL, "2" ) field( TWST, "Internal" )
	field( FLNK, "$(P)$(R)ImperxExpCtrlMode_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxExpCtrlMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetExpCtrlMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Off" )
	field( ONVL, "1" ) field( ONST, "Pulse" )
	field( TWVL, "2" ) field( TWST, "Internal" )
}

# A2D_Bits
record( mbbo, "$(P)$(R)ImperxA2D_Bits" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetA2D_Bits($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "8 bits" )
	field( ONVL, "1" ) field( ONST, "10 bits" )
	field( TWVL, "2" ) field( TWST, "12 bits" )
	field( FLNK, "$(P)$(R)ImperxA2D_Bits_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxA2D_Bits_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetA2D_Bits($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "8 bits" )
	field( ONVL, "1" ) field( ONST, "10 bits" )
	field( TWVL, "2" ) field( TWST, "12 bits" )
}

# DataOutputBits
record( mbbo, "$(P)$(R)ImperxDataOutputBits" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetDataOutputBits($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "8 bits" )
	field( ONVL, "1" ) field( ONST, "10 bits" )
	field( TWVL, "2" ) field( TWST, "12 bits" )
	field( FLNK, "$(P)$(R)ImperxDataOutputBits_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxDataOutputBits_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetDataOutputBits($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "8 bits" )
	field( ONVL, "1" ) field( ONST, "10 bits" )
	field( TWVL, "2" ) field( TWST, "12 bits" )
}

# CamlinkMode
record( mbbo, "$(P)$(R)ImperxCamlinkMode" )
{
	field( DOL,  "3" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetCamlinkMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Base 2 taps" )
	field( ONVL, "1" ) field( ONST, "Base 3 taps" )
	field( TWVL, "2" ) field( TWST, "Medium" )
	field( THVL, "3" ) field( THST, "Full" )
	field( FRVL, "4" ) field( FRST, "DECA" )
	field( FLNK, "$(P)$(R)ImperxCamlinkMode_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxCamlinkMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetCamlinkMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Base 2 taps" )
	field( ONVL, "1" ) field( ONST, "Base 3 taps" )
	field( TWVL, "2" ) field( TWST, "Medium" )
	field( THVL, "3" ) field( THST, "Full" )
	field( FRVL, "4" ) field( FRST, "DECA" )
}

# TrigModeSelect
record( mbbo, "$(P)$(R)ImperxTrigModeSelect" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigModeSelect($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Slow" ) field( ZRSV, "MINOR" )
	field( ONVL, "1" ) field( ONST, "Fast" )
	field( FLNK, "$(P)$(R)ImperxTrigModeSelect_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTrigModeSelect_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigModeSelect($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Slow" ) field( ZRSV, "MINOR" )
	field( ONVL, "1" ) field( ONST, "Fast" )
}

# FramesPerTrigger
record( longout, "$(P)$(R)ImperxFramesPerTrigger" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetFramesPerTrigger($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxFramesPerTrigger_RBV" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)ImperxFramesPerTrigger_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetFramesPerTrigger($(P)$(R)) $(PORT).SER" )
}

# TrigExpDelay (Set to zero as our EVR has it's own TriggerDelay that's more accurate)
record( longout, "$(P)$(R)ImperxTrigExpDelay" )
{
	field( DESC, "Trigger Exposure Delay, should be 0" )
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigExpDelay($(P)$(R)) $(PORT).SER" )
	field( EGU,  "us" )
	field( FLNK, "$(P)$(R)ImperxTrigExpDelay_RBV" )
}
record( longin, "$(P)$(R)ImperxTrigExpDelay_RBV" )
{
	field( DESC, "Trigger Exposure Delay, should be 0" )
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigExpDelay($(P)$(R)) $(PORT).SER" )
	field( EGU,  "us" )
}

# TrigStrobeMode
record( longout, "$(P)$(R)ImperxTrigStrobeMode" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigStrobeMode($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxTrigStrobeMode_RBV" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)ImperxTrigStrobeMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigStrobeMode($(P)$(R)) $(PORT).SER" )
}

# TrigDebounce
record( longout, "$(P)$(R)ImperxTrigDebounce" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigDebounce($(P)$(R)) $(PORT).SER" )
	field( EGU,  "us" )
	field( FLNK, "$(P)$(R)ImperxTrigDebounce_RBV" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)ImperxTrigDebounce_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigDebounce($(P)$(R)) $(PORT).SER" )
	field( EGU,  "us" )
}

# TrigFilterTime
record( longout, "$(P)$(R)ImperxTrigFilterTime" )
{
	field( DOL,  "5" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigFilterTime($(P)$(R)) $(PORT).SER" )
	field( EGU,  "us" )
	field( FLNK, "$(P)$(R)ImperxTrigFilterTime_RBV" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)ImperxTrigFilterTime_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigFilterTime($(P)$(R)) $(PORT).SER" )
	field( EGU,  "us" )
}

# TrigOverlapMode
record( mbbo, "$(P)$(R)ImperxTrigOverlapMode" )
{
	field( DESC, "0=IgnoreExtraTrig, 1=Retrigger" )
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigOverlapMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Ignore" )
	field( ONVL, "1" ) field( ONST, "Restart" )
	field( FLNK, "$(P)$(R)ImperxTrigOverlapMode_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTrigOverlapMode_RBV" )
{
	field( DESC, "0=IgnoreExtraTrig, 1=Retrigger" )
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigOverlapMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Ignore" )
	field( ONVL, "1" ) field( ONST, "Restart" )
}

# AOI_Mode
record( mbbo, "$(P)$(R)ImperxAOI_Mode" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetAOI_Mode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Disabled" )
	field( ONVL, "1" ) field( ONST, "ROI w/ FR inc" )
	field( TWVL, "2" ) field( TWST, "ROI w/ cnst FR" )
	field( FLNK, "$(P)$(R)ImperxAOI_Mode_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxAOI_Mode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetAOI_Mode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Disabled" )
	field( ONVL, "1" ) field( ONST, "ROI w/ FR inc" )
	field( TWVL, "2" ) field( TWST, "ROI w/ cnst FR" )
}

# AOI_HorizOffset
record( longout, "$(P)$(R)ImperxAOI_HorizOffset" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetAOI_HorizOffset($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxAOI_HorizOffset_RBV" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)ImperxAOI_HorizOffset_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetAOI_HorizOffset($(P)$(R)) $(PORT).SER" )
}

# AOI_HorizSize
record( longout, "$(P)$(R)ImperxAOI_HorizSize" )
{
	field( DOL,  "1944" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetAOI_HorizSize($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxAOI_HorizSize_RBV" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)ImperxAOI_HorizSize_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetAOI_HorizSize($(P)$(R)) $(PORT).SER" )
}

# AOI_VertOffset
record( longout, "$(P)$(R)ImperxAOI_VertOffset" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetAOI_VertOffset($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxAOI_VertOffset_RBV" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)ImperxAOI_VertOffset_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetAOI_VertOffset($(P)$(R)) $(PORT).SER" )
}

# AOI_VertSize
record( longout, "$(P)$(R)ImperxAOI_VertSize" )
{
	field( DOL,  "1472" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetAOI_VertSize($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxAOI_VertSize_RBV" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)ImperxAOI_VertSize_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetAOI_VertSize($(P)$(R)) $(PORT).SER" )
}

# HorizDecimate
record( mbbo, "$(P)$(R)ImperxHorizDecimate" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetHorizDecimate($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxHorizDecimate_RBV" )
	field( ZRVL, "0" ) field( ZRST, "Normal" )
	field( ONVL, "1" ) field( ONST, "2:1 Dec" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxHorizDecimate_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetHorizDecimate($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Normal" )
	field( ONVL, "1" ) field( ONST, "2:1 Dec" )
}

# VertDecimate
record( mbbo, "$(P)$(R)ImperxVertDecimate" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetVertDecimate($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Normal" )
	field( ONVL, "1" ) field( ONST, "2:1 Dec" )
	field( FLNK, "$(P)$(R)ImperxVertDecimate_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxVertDecimate_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetVertDecimate($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Normal" )
	field( ONVL, "1" ) field( ONST, "2:1 Dec" )
}

# VertBinning
record( mbbo, "$(P)$(R)ImperxVertBinning" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetVertBinning($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Normal" )
	field( ONVL, "1" ) field( ONST, "2X Binning" )
	field( FLNK, "$(P)$(R)ImperxVertBinning_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxVertBinning_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetVertBinning($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Normal" )
	field( ONVL, "1" ) field( ONST, "2X Binning" )
}

# HorizBinning
record( mbbo, "$(P)$(R)ImperxHorizBinning" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetHorizBinning($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Normal" )
	field( ONVL, "1" ) field( ONST, "2X Binning" )
	field( FLNK, "$(P)$(R)ImperxHorizBinning_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxHorizBinning_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetHorizBinning($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Normal" )
	field( ONVL, "1" ) field( ONST, "2X Binning" )
}

# TestPattern
record( mbbo, "$(P)$(R)ImperxTestPattern" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTestPattern($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "None" )
	field( ONVL, "1" ) field( ONST, "CheckerBd" )
	field( TWVL, "2" ) field( TWST, "Gray" )
	field( THVL, "3" ) field( THST, "TapVals" )
	field( FRVL, "4" ) field( FRST, "HRamp" )
	field( FVVL, "5" ) field( FVST, "VRamp" )
	field( SXVL, "6" ) field( SXST, "BothRamp" )
	field( SVVL, "7" ) field( SVST, "Moving" )
	field( EIVL, "8" ) field( EIST, "Bars" )
	field( NIVL, "9" ) field( NIST, "Cross" )
	field( FLNK, "$(P)$(R)ImperxTestPattern_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTestPattern_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTestPattern($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "None" )
	field( ONVL, "1" ) field( ONST, "CheckerBd" )
	field( TWVL, "2" ) field( TWST, "Gray" )
	field( THVL, "3" ) field( THST, "TapVals" )
	field( FRVL, "4" ) field( FRST, "HRamp" )
	field( FVVL, "5" ) field( FVST, "VRamp" )
	field( SXVL, "6" ) field( SXST, "BothRamp" )
	field( SVVL, "7" ) field( SVST, "Moving" )
	field( EIVL, "8" ) field( EIST, "Bars" )
	field( NIVL, "9" ) field( NIST, "Cross" )
}

# CamFrameTime
record( longin, "$(P)$(R)ImperxCamFrameTime_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetCamFrameTime($(P)$(R)) $(PORT).SER" )
	field( EGU,  "us" )
	field( PINI, "YES" )
}

# MinFrameTime
record( longin, "$(P)$(R)ImperxMinFrameTime_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetMinFrameTime($(P)$(R)) $(PORT).SER" )
	field( EGU,  "us" )
	field( PINI, "YES" )
}

# SoftReset
record( longout, "$(P)$(R)ImperxSoftReset" )
{
	field( DOL,  "0xDEADBEEF" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SoftReset($(P)$(R)) $(PORT).SER" )
}

record( mbbo, "$(P)$(R)CamTriggerMode" )
{
	field( FLNK, "$(P)$(R)ImperxTriggerModeFanout" )
}
# Select fanout off TriggerMode to a sequence record for each supported TriggerMode.
record( fanout, "$(P)$(R)ImperxTriggerModeFanout" )
{
	field( SELL, "$(P)$(R)CamTriggerMode NPP NMS" )
	field( SELM, "Specified" )
	field( LNK0, "$(P)$(R)SeqTriggerModeFreeRun" )
	field( LNK1, "$(P)$(R)SeqTriggerModeExternal" )
	field( LNK2, "$(P)$(R)SeqTriggerModePulse" )
}
record( seq, "$(P)$(R)SeqTriggerModeFreeRun" )
{
	#	First stop aquisition triggers
	field( DLY0, "0" ) field( DOL0, "0" ) field( LNK0, "$(P)$(R)Acquire  PP NMS" )

	field( DESC, "FreeRun TriggerMode" )
	field( DLY1, "1" ) field( DOL1, "2" ) field( LNK1, "$(P)$(R)ImperxTrigInput PP NMS" )
	field( DLY2, "0" ) field( DOL2, "2" ) field( LNK2, "$(P)$(R)ImperxExpCtrlMode PP NMS" )
	field( DLY3, "0" ) field( DOL3, "0" ) field( LNK3, "$(P)$(R)ImperxTriggerEnable PP NMS" )
	field( DLY4, "0" ) field( DOL4, "0" ) field( LNK4, "$(P)$(R)CamTriggerMode_RBV PP NMS" )
}
record( seq, "$(P)$(R)SeqTriggerModeExternal" )
{
	#	First stop aquisition triggers
	field( DLY0, "0" ) field( DOL0, "0" ) field( LNK0, "$(P)$(R)Acquire  PP NMS" )

	field( DESC, "External TriggerMode" )
	field( DLY1, "1" ) field( DOL1, "3" ) field( LNK1, "$(P)$(R)ImperxTrigInput PP NMS" )
	field( DLY2, "0" ) field( DOL2, "2" ) field( LNK2, "$(P)$(R)ImperxExpCtrlMode PP NMS" )
	field( DLY3, "0" ) field( DOL3, "1" ) field( LNK3, "$(P)$(R)ImperxTriggerEnable PP NMS" )
	field( DLY4, "0" ) field( DOL4, "1" ) field( LNK4, "$(P)$(R)CamTriggerMode_RBV PP NMS" )
}
record( seq, "$(P)$(R)SeqTriggerModePulse" )
{
	#	First stop aquisition triggers
	field( DLY0, "0" ) field( DOL0, "0" ) field( LNK0, "$(P)$(R)Acquire  PP NMS" )

	field( DESC, "Pulse TriggerMode" )
	field( DLY1, "1" ) field( DOL1, "3" ) field( LNK1, "$(P)$(R)ImperxTrigInput PP NMS" )
	field( DLY2, "0" ) field( DOL2, "1" ) field( LNK2, "$(P)$(R)ImperxExpCtrlMode PP NMS" )
	field( DLY3, "0" ) field( DOL3, "1" ) field( LNK3, "$(P)$(R)ImperxTriggerEnable PP NMS" )
	field( DLY4, "0" ) field( DOL4, "2" ) field( LNK4, "$(P)$(R)CamTriggerMode_RBV PP NMS" )
}

# Include a serialMonitor.template monitor
# This should be the first PV you process in the CamReConfigSeq
substitute "MON_SCAN=10 second"
substitute "SER_OK_PV=$(P)$(R)ImperxCamlinkMode_RBV"
include "serialMonitor.template"

# 1 second RBV monitors
substitute "MON_SCAN=1 second"

# 10 second RBV monitors
substitute "MON_SCAN=10 second"
substitute "MON_DISABLED=0"
substitute "MON_PV=$(P)$(R)ImperxTriggerEnable_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigInput_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigEdgeSelect_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxExpCtrlMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxA2D_Bits_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxDataOutputBits_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigModeSelect_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxFramesPerTrigger_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigExpDelay_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigStrobeMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigDebounce_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigFilterTime_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigOverlapMode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_Mode_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_HorizOffset_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_HorizSize_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_VertOffset_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_VertSize_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxHorizDecimate_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxVertDecimate_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxHorizBinning_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxVertBinning_RBV"
include "rbvMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTestPattern_RBV"
include "rbvMonitor.template"

# Put monitors
substitute "MON_SCAN=1 second"
substitute "MON_DISABLED=1"
#substitute "MON_VALUE=1"
substitute "MON_PV=$(P)$(R)ImperxCamlinkMode"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTriggerEnable"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigInput"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigEdgeSelect"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxExpCtrlMode"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxA2D_Bits"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxDataOutputBits"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigModeSelect"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxFramesPerTrigger"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigExpDelay"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigStrobeMode"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigDebounce"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigFilterTime"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTrigOverlapMode"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_Mode"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_HorizOffset"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_HorizSize"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_VertOffset"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxAOI_VertSize"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxHorizDecimate"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxVertDecimate"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxHorizBinning"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxVertBinning"
include "putMonitor.template"
substitute "MON_PV=$(P)$(R)ImperxTestPattern"
include "putMonitor.template"
