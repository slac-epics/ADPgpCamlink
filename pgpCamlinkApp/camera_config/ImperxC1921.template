#
# EPICS database for
# Imperx Cheetah Pregius C1921 Camera
#
# Required macros:
#	P			PV prefix part 1 $P$R
#	R			PV prefix part 2 $P$R
#	PGP_PV		PV prefix for rogue register PVs
#	PGP_LANE	PGP_LANE number 0-3
#

record( stringin, "$(P)$(R)CamModel" )
{
	field( VAL,  "C1921" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)CamModelScreen" )
{
	field( VAL,  "ADPgpCamlinkScreens/ImperxC1921.edl" )
	field( PINI, "YES" )
}

# Camlink settings
record( longout, "$(P)$(R)CamlinkPixelClk" )
{
	field( DOL,  "50" )
}

record( longout, "$(P)$(R)CamlinkBaudRate" )
{
	field( DOL,  "115200" )
	field( OMSL, "closed_loop" )
	field( HIGH, "115201" )
	field( HSV,  "MINOR" )
	field( LOW,  "115199" )
	field( LSV,  "MINOR" )
	field( PINI, "YES" )
}
record( mbbo, "$(P)$(R)CamlinkLinkMode" )
{
	field( DOL,  "3" )
	field( TWSV, "MINOR" )
	field( ZRSV, "MINOR" )
	field( PINI, "YES" )
}
record( mbbo, "$(P)$(R)CamlinkDataMode" )
{
	field( DOL,  "2" ) # 10 Bit
	field( ONSV, "MINOR" )
	field( TWSV, "NO_ALARM" )
	field( THSV, "MINOR" )
	field( FRSV, "MINOR" )
	field( FVSV, "MINOR" )
	field( PINI, "YES" )
}
record( mbbo, "$(P)$(R)CamlinkFrameMode" )
{
	field( DOL,  "2" )
	field( THSV, "MINOR" )
	field( ONSV, "MINOR" )
	field( PINI, "YES" )
}
record( longout, "$(P)$(R)CamlinkHTap" )
{
	field( DOL,  "8" )
	field( HIGH, "10" )
	field( HSV,  "MINOR" )
	field( LOW,  "9" )
	field( LSV,  "MINOR" )
	field( PINI, "YES" )
}
record( longout, "$(P)$(R)CamlinkTrigMask" )
{
	field( DOL,  "1" )	# Trigger on CC1
	field( OMSL, "closed_loop" )
	field( PINI, "YES" )
}
record( bo, "$(P)$(R)CamlinkInvCC" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
}

# Provide defaults for ADCore SizeX and SizeY
record( longout, "$(P)$(R)SizeX" )
{
	field( DOL, "1944" )
}
record( longout, "$(P)$(R)SizeY" )
{
	field( DOL, "1472" )
}
record( longout, "$(P)$(R)CamlinkHActive" )
{
	field( VAL, "1944" )
}
record( longout, "$(P)$(R)CamlinkVActive" )
{
	field( VAL, "1472" )
}

# W/O, write 1 to reset device
record( bo, "$(P)$(R)ResetDevice" )
{
	field( DESC, "Reset camera to power up state" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetUint32(\\x601C,1) $(PORT).SER" )
    field( ZNAM, "Reset" )
    field( ONAM, "Resetting!"  )
#    field( SDIS, "$(P)$(R)SerialDisable" )
}

record( mbbo, "$(P)$(R)ImperxCommError" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( ZRVL, "0" ) field( ZRST, "No Error" )
	field( ONVL, "1" ) field( ONST, "Invalid Cmd" )
	field( TWVL, "2" ) field( TWST, "Time-out" )
	field( THVL, "3" ) field( THST, "Cksum Error" )
	field( FRVL, "4" ) field( FRST, "Val < Min" )
	field( FVVL, "5" ) field( FVST, "Val > Max" )
	field( SXVL, "6" ) field( SXST, "AGC Error" )
	field( SVVL, "7" ) field( SVST, "Supvsr Mode Err" )
	field( EIVL, "8" ) field( EIST, "Mode Not Supp" )
}

# TriggerEnable
record( mbbo, "$(P)$(R)ImperxTriggerEnable" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTriggerEnable($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxTriggerEnable_RBV" )
	field( ZRVL, "0" ) field( ZRST, "Disabled" )
	field( ONVL, "1" ) field( ONST, "Enabled" )
#	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTriggerEnable_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigEnable($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Disabled" )
	field( ONVL, "1" ) field( ONST, "Enabled" )
}

# TrigInput
record( mbbo, "$(P)$(R)ImperxTrigInput" )
{
	field( DOL,  "3" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigInput($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "N/A" )
	field( ONVL, "1" ) field( ONST, "Ext Cam IN1" )
	field( TWVL, "2" ) field( TWST, "Internal" )
	field( THVL, "3" ) field( THST, "Camlink CC1" )
	field( FRVL, "4" ) field( FRST, "Software" )
	field( FVVL, "5" ) field( FVST, "Ext Cam IN2" )
	field( FLNK, "$(P)$(R)ImperxTrigInput_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTrigInput_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigInput($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "N/A" )
	field( ONVL, "1" ) field( ONST, "Ext Cam IN1" )
	field( TWVL, "2" ) field( TWST, "Internal" )
	field( THVL, "3" ) field( THST, "Camlink CC1" )
	field( FRVL, "4" ) field( FRST, "Software" )
	field( FVVL, "5" ) field( FVST, "Ext Cam IN2" )
}

# TrigEdgeSelect
record( mbbo, "$(P)$(R)ImperxTrigEdgeSelect" )
{
	field( DOL,  "0" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetTrigEdgeSelect($(P)$(R)) $(PORT).SER" )
	field( FLNK, "$(P)$(R)ImperxTrigEdgeSelect_RBV" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxTrigEdgeSelect_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetTrigEdgeSelect($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Rising" )
	field( ONVL, "1" ) field( ONST, "Falling" )
}

# ExpCtrlMode
record( mbbo, "$(P)$(R)ImperxExpCtrlMode" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetExpCtrlMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Off" )
	field( ONVL, "1" ) field( ONST, "Pulse" )
	field( TWVL, "2" ) field( TWST, "Internal" )
	field( FLNK, "$(P)$(R)ImperxExpCtrlMode_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxExpCtrlMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetExpCtrlMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Off" )
	field( ONVL, "1" ) field( ONST, "Pulse" )
	field( TWVL, "2" ) field( TWST, "Internal" )
}

# A2D_Bits
record( mbbo, "$(P)$(R)ImperxA2D_Bits" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetA2D_Bits($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "8 bits" )
	field( ONVL, "1" ) field( ONST, "10 bits" )
	field( TWVL, "2" ) field( TWST, "12 bits" )
	field( FLNK, "$(P)$(R)ImperxA2D_Bits_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxA2D_Bits_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetA2D_Bits($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "8 bits" )
	field( ONVL, "1" ) field( ONST, "10 bits" )
	field( TWVL, "2" ) field( TWST, "12 bits" )
}

# DataOutputBits
record( mbbo, "$(P)$(R)ImperxDataOutputBits" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetDataOutputBits($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "8 bits" )
	field( ONVL, "1" ) field( ONST, "10 bits" )
	field( TWVL, "2" ) field( TWST, "12 bits" )
	field( FLNK, "$(P)$(R)ImperxDataOutputBits_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxDataOutputBits_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetDataOutputBits($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "8 bits" )
	field( ONVL, "1" ) field( ONST, "10 bits" )
	field( TWVL, "2" ) field( TWST, "12 bits" )
}

# CamlinkMode
record( mbbo, "$(P)$(R)ImperxCamlinkMode" )
{
	field( DOL,  "3" )
	field( PINI, "YES" )
	field( DTYP, "stream" )
	field( OUT,  "@ImperxC1921.proto SetCamlinkMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Base 2 taps" )
	field( ONVL, "1" ) field( ONST, "Base 3 taps" )
	field( TWVL, "2" ) field( TWST, "Medium" )
	field( THVL, "3" ) field( THST, "Full" )
	field( FRVL, "4" ) field( FRST, "DECA" )
	field( FLNK, "$(P)$(R)ImperxCamlinkMode_RBV" )
	info( autosaveFields, "VAL" )
}
record( mbbi, "$(P)$(R)ImperxCamlinkMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@ImperxC1921.proto GetCamlinkMode($(P)$(R)) $(PORT).SER" )
	field( ZRVL, "0" ) field( ZRST, "Base 2 taps" )
	field( ONVL, "1" ) field( ONST, "Base 3 taps" )
	field( TWVL, "2" ) field( TWST, "Medium" )
	field( THVL, "3" ) field( THST, "Full" )
	field( FRVL, "4" ) field( FRST, "DECA" )
}

# Include a serialMonitor.template monitor
# This should be the first PV you process in the CamReConfigSeq
substitute "MON_SCAN=10 second"
#substitute "SER_OK_PV= $(P)$(R)Up900Report"
#include "serialMonitor.template"

# 1 second RBV monitors
substitute "MON_SCAN=1 second"

# 10 second RBV monitors
substitute "MON_SCAN=10 second"
substitute "MON_DISABLED=0"
#substitute "MON_PV= $(P)$(R)Up900RawShutterSpeed_RBV"
#include "rbvMonitor.template"

# Put monitors
substitute "MON_SCAN=1 second"
substitute "MON_DISABLED=1"
#substitute "MON_PV= $(P)$(R)Up900SetGain"
#include "putMonitor.template"
