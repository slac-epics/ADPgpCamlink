#
# EPICS database for
# JAI CM-140M-CL Camera
#
# Required macros:
#	P			PV prefix part 1 $P$R
#	R			PV prefix part 2 $P$R
#	PGP_PV		PV prefix for rogue register PVs
#	PGP_LANE	PGP_LANE number 0-3
#

record( stringin, "$(P)$(R)CamModel" )
{
	field( VAL,  "JaiCm140M" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)CamModelScreen" )
{
	field( VAL,  "ADPgpCamlinkScreens/JaiCm140M.edl" )
	field( PINI, "YES" )
}

# Camlink settings
record( longout, "$(P)$(R)CamlinkPixelClk" )
{
	field( DOL,  "40" )
}
record( longout, "$(P)$(R)CamlinkBaudRate" )
{
	field( DOL,  "9600" )
	field( OMSL, "closed_loop" )
	field( HIGH, "9601" )
	field( HSV,  "MINOR" )
	field( LOW,  "9599" )
	field( LSV,  "MINOR" )
	field( PINI, "YES" )
}
record( mbbo, "$(P)$(R)CamlinkDataMode" )
{
	field( DOL,  "2" ) # 10 Bit
	field( ONSV, "MINOR" )
	field( THSV, "MINOR" )
	field( PINI, "YES" )
}
record( mbbo, "$(P)$(R)CamlinkFrameMode" )
{
	field( DOL,  "2" )
	field( THSV, "MINOR" )
	field( ONSV, "MINOR" )
	field( PINI, "YES" )
}
record( mbbo, "$(P)$(R)CamlinkLinkMode" )
{
	field( DOL,  "1" )
	field( TWSV, "MINOR" )
	field( ZRSV, "MINOR" )
	field( PINI, "YES" )
}
record( longout, "$(P)$(R)CamlinkHTap" )
{
	field( DOL,  "1" )
	field( HIGH, "2" )
	field( HSV,  "MINOR" )
	field( LOW,  "0" )
	field( LSV,  "MINOR" )
	field( PINI, "YES" )
}
record( longout, "$(P)$(R)CamlinkTrigMask" )
{
	field( DOL,  "1" )	# Trigger on CC1
#	field( OMSL, "closed_loop" )
	field( PINI, "YES" )
}
record( bo, "$(P)$(R)CamlinkInvCC" )
{
	field( DOL,  "1" )
	field( PINI, "YES" )
}

# Provide defaults for ADCore SizeX and SizeY
record( longout, "$(P)$(R)SizeX" )
{
	field( DOL, "1380" )
}
record( longout, "$(P)$(R)SizeY" )
{
	field( DOL, "1040" )
}
record( longout, "$(P)$(R)CamlinkHActive" )
{
	field( VAL, "1380" )
}
record( longout, "$(P)$(R)CamlinkVActive" )
{
	field( VAL, "1040" )
}
record( longout, "$(P)$(R)CamlinkHSkip" )
{
	field( VAL, "0" )
}
record( longout, "$(P)$(R)CamlinkVSkip" )
{
	field( VAL, "0" )
}

record( ao, "$(P)$(R)Gain" )
{
	field( HOPR,	"100.0" )
	field( LOPR,	"0.0" )
	field( EGU,     "%" )
	field( PREC,    "2" )
	field( FLNK,	"$(P)$(R)CamGain" )
}
record( ao, "$(P)$(R)CamGain" )
{
	field( DOL,		"$(P)$(R)Gain" )
	field( OMSL,	"closed_loop" )
	field( HOPR,	"100.0" )
	field( LOPR,	"0.0" )
	field( EGU,     "%" )
	field( PREC,    "2" )
	field( FLNK,	"$(P)$(R)JaiCalcGain" )
	info( autosaveFields, "VAL" )
}
record( calc, "$(P)$(R)JaiCalcGain" )
{
	field( INPA, "$(P)$(R)CamGain NPP NMS" )
	field( CALC, "(A*420/100)-84" )
	field( FLNK, "$(P)$(R)JaiGain" )
	field( PREC, "2" )
}
record( ao, "$(P)$(R)JaiGain" )
{
	field( DESC,	"Camera gain (0..1023)" )
	field( DOL,		"$(P)$(R)JaiCalcGain" )
	field( OMSL,	"closed_loop" )
	field( DTYP,	"stream" )
	field( OUT,		"@JaiCm140M.proto SetInt(GA) $(PORT).SER" )
	field( DRVH,	"336" )
	field( DRVL,	"-84" )
	field( HOPR,	"336" )
	field( LOPR,	"-84" )
	field( PREC,    "0" )
	field( FLNK,	"$(P)$(R)JaiGain_RBV" )
}

record( longin,	"$(P)$(R)JaiGain_RBV" )
{
	field( DESC,	"Gain from camera report" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto ReadGain $(PORT).SER" )
#	field( SCAN,	"I/O Intr" )
    field( FLNK,	"$(P)$(R)JaiCalcGain_RBV" )
}
record( calcout, "$(P)$(R)JaiCalcGain_RBV" )
{
	field( INPA, "$(P)$(R)JaiGain_RBV NPP NMS" )
	field( CALC, "(A+84)*100/420" )
	field( OUT,  "$(P)$(R)CamGain_RBV PP MS" )
	field( PREC, "2" )
}
record( ao, "$(P)$(R)CamGain_RBV" )
{
#	field( TPRO, 2 )
	field( EGU,  "%" )
	field( PREC, "2" )
	field( OUT,  "$(P)$(R)Gain_RBV PP MS" )
}

record( ao, "$(P)$(R)CamAcquireTime" )
{
#	field( TPRO, 2 )
	field( PREC, "5" )
#	field( FLNK, "$(P)$(R)JaiAcquireTimeFanout" )
#	field( FLNK, "$(P)$(R)JaiShutter_ASub" )
}

record( ao, "$(P)$(R)JaiBlackLevel" )
{
	field( DESC,	"Black Level (0..1023)" )
	field( DTYP,	"stream" )
	field( OUT,		"@JaiCm140M.proto SetInt(BL) $(PORT).SER" )
	field( DRVH,	"1023" )
	field( DRVL,	"0" )
	field( PREC,    "0" )
	field( FLNK,	"$(P)$(R)JaiBlackLevel_RBV" )
	info( autosaveFields, "VAL" )
}

record( longin,	"$(P)$(R)JaiBlackLevel_RBV" )
{
	field( DESC,	"Black Level (0..1023)" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto GetInt(BL) $(PORT).SER" )
	field( PINI,	"YES"	)
}

record( mbbo, "$(P)$(R)JaiRawPixelDepth" )
{
	field( DESC,	"Pixel Depth" )
	field( DTYP,	"stream" )
	field( DOL,     "1" )
	field( OUT,		"@JaiCm140M.proto SetInt(BA) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( ZRST,	"8-bit"	)
	field( ONST,	"10-bit" )
	field( FLNK,	"$(P)$(R)JaiRawPixelDepth_RBV" )
#	info( autosaveFields, "VAL" )
}

record( mbbi,	"$(P)$(R)JaiRawPixelDepth_RBV" )
{
	field( DESC,	"Pixel Depth" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto GetInt(TI) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( ZRST,	"8-bit"	)
	field( ONST,	"10-bit" )
}
record( mbbo, "$(P)$(R)JaiRawPresetShutter" )
{
	field( DESC,	"JAI Preset Shutter Speeds" )
	field( DTYP,	"stream" )
	field( OUT,		"@up900.proto SetInt(SH) $(PORT).SER" )
	field( ZRVL,	"0"	)	field( ZRST,	"Off"		)
	field( ONVL,	"1"	)	field( ONST,	"1/60"		)
	field( TWVL,	"2"	)	field( TWST,	"1/100"		)
	field( THVL,	"3"	)	field( THST,	"1/250"		)
	field( FRVL,	"4"	)	field( FRST,	"1/500"		)
	field( FVVL,	"5"	)	field( FVST,	"1/1000"	)
	field( SXVL,	"6"	)	field( SXST,	"1/2000"	)
	field( SVVL,	"7"	)	field( SVST,	"1/4000"	)
	field( EIVL,	"8"	)	field( EIST,	"1/8000"	)
	field( NIVL,	"9"	)	field( NIST,	"1/10000"	)
	field( FLNK,	"$(P)$(R)JaiRawPresetShutter_RBV" )
}
record( mbbi,	"$(P)$(R)JaiRawPresetShutter_RBV" )
{
	field( DESC,	"JAI Preset Shutter Speeds" )
	field( DTYP,	"stream" )
	field( INP,		"@up900.proto GetInt(SH) $(PORT).SER " )
	field( ZRVL,	"0"	)	field( ZRST,	"Off"		)
	field( ONVL,	"1"	)	field( ONST,	"1/60"		)
	field( TWVL,	"2"	)	field( TWST,	"1/100"		)
	field( THVL,	"3"	)	field( THST,	"1/250"		)
	field( FRVL,	"4"	)	field( FRST,	"1/500"		)
	field( FVVL,	"5"	)	field( FVST,	"1/1000"	)
	field( SXVL,	"6"	)	field( SXST,	"1/2000"	)
	field( SVVL,	"7"	)	field( SVST,	"1/4000"	)
	field( EIVL,	"8"	)	field( EIST,	"1/8000"	)
	field( NIVL,	"9"	)	field( NIST,	"1/10000"	)
#	field( FLNK,	"$(P)$(R)JaiRawPresetShutter_ASub" )
}

# JAI Units vary w/ camera type and vertical binning mode
#	MCL/PMCL Cameras
#	No vertical binning: 30.58us
#	W/ vertical binning: 58.9us
record( longout, "$(P)$(R)JaiRawProgExposure" )
{
	field( DESC,	"Programmable Exposure Length" )
	field( DTYP,	"stream" )
	field( DOL,     "2" )
	field( OUT,		"@JaiCm140M.proto SetInt(PE) $(PORT).SER" )
	field( DRVL,    "2" )
	field( DRVH,    "1051" )
	field( EGU,		"30.58us" )
	field( FLNK,	"$(P)$(R)JaiRawProgExposure_RBV" )
#	info( autosaveFields, "VAL" )
}

record( longin,	"$(P)$(R)JaiRawProgExposure_RBV" )
{
	field( DESC,	"Programmable Exposure Length" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto GetInt(PE) $(PORT).SER" )
	field( EGU,		"30.58us" )
}

record( mbbo, "$(P)$(R)JaiRawScanMode" )
{
	field( DESC,	"Scan Mode" )
	field( DTYP,	"stream" )
	field( DOL,     "2" )
	field( OUT,		"@JaiCm140M.proto SetInt(SC) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( TWVL,	"2"	)
	field( THVL,	"3"	)
	field( FRVL,	"4"	)
	field( ZRST,	"FullFr"	)
	field( ONST,	"2/3 Fr"	)
	field( TWST,	"1/2 Fr"	)
	field( THST,	"1/4 Fr"	)
	field( FRST,	"1/8 Fr"	)
	field( FLNK,	"$(P)$(R)JaiRawScanMode_RBV" )
#	info( autosaveFields, "VAL" )
}

record( mbbi,	"$(P)$(R)JaiRawScanMode_RBV" )
{
	field( DESC,	"Trigger Mode" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto GetInt(SC) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( TWVL,	"2"	)
	field( THVL,	"3"	)
	field( ZRST,	"FreeRun"	)
	field( ONST,	"External"	)
	field( TWST,	"Pulse"	)
	field( THST,	"TrigFreeRun"	)
}

record( mbbo, "$(P)$(R)JaiRawShutterMode" )
{
	field( DESC,	"Numeric shutter value" )
	field( DTYP,	"stream" )
	field( OUT,		"@JaiCm140M.proto SetInt(SM) $(PORT).SER" )
	field( DOL,		"0"	)
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( ZRST,	"Presets"	)
	field( ONST,	"ProgExp"	)
	field( FLNK,	"$(P)$(R)JaiRawShutterMode_RBV" )
	field( PINI,	"YES"	)
#	info( autosaveFields, "VAL" )
}
record( mbbi,	"$(P)$(R)JaiRawShutterMode_RBV" )
{
	field( DESC,	"Camera shutter mode" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto GetInt(SM) $(PORT).SER " )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( ZRST,	"Presets"	)
	field( ONST,	"ProgExp"	)
}

record( mbbo, "$(P)$(R)JaiRawTriggerInput" )
{
	field( DESC,	"Trigger Input" )
	field( DTYP,	"stream" )
	field( DOL,     "0" )
	field( OUT,		"@JaiCm140M.proto SetInt(TI) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( ZRST,	"Camlink"	)
	field( ONST,	"External"	)
    field( PINI, "YES" )
	field( FLNK,	"$(P)$(R)JaiRawTriggerInput_RBV" )
#	info( autosaveFields, "VAL" )
}

record( mbbi,	"$(P)$(R)JaiRawTriggerInput_RBV" )
{
	field( DESC,	"Trigger Input" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto GetInt(TI) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( ZRST,	"Camlink"	)
	field( ONST,	"External"	)
}

# Raw Trigger Mode
# JAI has option 3, TrigFreeRun, which interrupts any current frame readout,
# does one triggered readout, then reverts to FreeRun mode.
# We don't use it.
record( mbbo, "$(P)$(R)JaiRawTriggerMode" )
{
	field( DESC,	"Trigger Mode" )
	field( DTYP,	"stream" )
	field( DOL,     "2" )
	field( OUT,		"@JaiCm140M.proto SetInt(TR) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( TWVL,	"2"	)
	field( THVL,	"3"	)
	field( ZRST,	"FreeRun"	)
	field( ONST,	"External"	)
	field( TWST,	"Pulse"	)
	field( THST,	"TrigFreeRun"	)
	field( FLNK,	"$(P)$(R)JaiRawTriggerMode_RBV" )
#	info( autosaveFields, "VAL" )
}

record( mbbi,	"$(P)$(R)JaiRawTriggerMode_RBV" )
{
	field( DESC,	"Trigger Mode" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto GetInt(TR) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( TWVL,	"2"	)
	field( THVL,	"3"	)
	field( ZRST,	"FreeRun"	)
	field( ONST,	"External"	)
	field( TWST,	"Pulse"	)
	field( THST,	"TrigFreeRun"	)
}

record( mbbo, "$(P)$(R)JaiRawTriggerPolarity" )
{
	field( DESC,	"Trigger Polarity" )
	field( DTYP,	"stream" )
	field( DOL,     "0" )
	field( OUT,		"@JaiCm140M.proto SetInt(TI) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( ZRST,	"Normal"	)
	field( ONST,	"Invert"	)
    field( PINI,	 "YES" )
	field( FLNK,	"$(P)$(R)JaiRawTriggerPolarity_RBV" )
#	info( autosaveFields, "VAL" )
}

record( mbbi,	"$(P)$(R)JaiRawTriggerPolarity_RBV" )
{
	field( DESC,	"Trigger Polarity" )
	field( DTYP,	"stream" )
	field( INP,		"@JaiCm140M.proto GetInt(TI) $(PORT).SER" )
	field( ZRVL,	"0"	)
	field( ONVL,	"1"	)
	field( ZRST,	"Normal"	)
	field( ONST,	"Invert"	)
}

# Effective transmit rate is 40Mhz PixelClock
record( ao, "$(P)$(R)XmitRate" )
{
    field( DOL,  "40.0e6" )
    field( EGU,  "Px/Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
#	info( autosaveFields, "VAL" )
}   

# Set SerThrottle to 30000
record( longout, "$(P)$(R)Jai:SerThrottle" )
{
	field( DOL,  "30000" )
	field( OUT,  "$(P)$(R)Feb$(PGP_LANE):SerThrottle" )
}

# Possible TODO: Add support for
#	BL,BL?	Set and read black level

# Include a serialMonitor.template monitor
# This should be the first PV you process in the CamReConfigSeq
substitute "MON_SCAN=10 second"
#substitute "SER_OK_PV= $(P)$(R)JaiReport"
#include "serialMonitor.template"

# 1 second RBV monitors
substitute "MON_SCAN=1 second"

# 10 second RBV monitors
substitute "MON_SCAN=10 second"
substitute "MON_DISABLED=0"
#substitute "MON_PV= $(P)$(R)JaiRawProgExposure_RBV"
#include "rbvMonitor.template"

# Put monitors
substitute "MON_SCAN=1 second"
substitute "MON_DISABLED=1"
#substitute "MON_PV= $(P)$(R)JaiGain"
#include "putMonitor.template"
